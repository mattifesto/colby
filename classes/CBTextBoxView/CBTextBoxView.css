.CBTextBoxView {
    box-sizing:             border-box;
    display:                flex;
    display:                -ms-flexbox;
    display:                -webkit-flex;
    flex-direction:         column;
    -ms-flex-direction:     column;
    -webkit-flex-direction: column;
    overflow:               hidden;
}

a.CBTextBoxView {
    color:              inherit;    /* 1 */
    text-decoration:    inherit;
}

.CBTextBoxView b,
.CBTextBoxView cite,
.CBTextBoxView code,
.CBTextBoxView i,
.CBTextBoxView h1,
.CBTextBoxView h2,
.CBTextBoxView h3,
.CBTextBoxView pre {
    font: inherit;                  /* 1 */
}

.CBTextBoxView ol,
.CBTextBoxView ul {
    list-style-type:    none;       /* 1 */
    padding:            0;
}

.CBTextBoxView > * {
    flex:           none;           /* 2 */
    -ms-flex:       none;
    -webkit-flex:   none;
}

.CBTextBoxView.NoTheme {
    padding:            20px 40px;
}

.CBTextBoxView.NoTheme > h1 {
    font-size: 2.0em;               /* 3 */
}

.CBTextBoxView.NoTheme > h1 + div {
    margin-top: 20px;
}

.CBTextBoxView.NoTheme div {
    line-height: 1.5;
}

.CBTextBoxView.NoTheme div > p + p {
    margin-top: 1em;
}

/* 1
 * These rules remove the browser default styles for these views. When dealing
 * with custom fonts they can result in synthesized fonts. Also, elements like
 * h1, h2, h3 and even lists should not have default styles because they will
 * certainly be wrong and I don't want to be obligated to rewrite every possible
 * style for every new theme. This styles allow these to work by default and
 * each styles is additive.
 */

/* 2
 * Allowing the h1 and the div child to flex will result in odd behavior when
 * the the children overflow the height of the view. The margin between the h1
 * and div will collapse among other things. This rule keeps things predictable
 * in the event of an overflow.
 */

/* 3
 * Browser defaults make h1 elements inside of sections smaller than those
 * inside of anchors. This setting normalizes that.
 */
