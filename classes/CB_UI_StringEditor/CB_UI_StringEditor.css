.CB_UI_StringEditor {
    display: flex;
    justify-content: center;
    box-sizing: border-box;
    max-width: 100%;
    overflow-wrap: break-word;
    padding: 10px 20px;
}



.CB_UI_StringEditor_container {
    border-color: var(--CB_UI_borderColor);
    border-radius: 5px;
    border-style: solid;
    border-width: 1px;
    box-sizing: border-box;
    max-width: 100%;
    padding: 3px 10px;
    width: var(--CB_UI_readableWidth);
}



/**
 * Use JavaScript to add and remove the CBUIStringEditor_error from a
 * CB_UI_StringEditor element to provide a visual indication of whether the value
 * is valid or invalid.
 */
.CB_UI_StringEditor.CB_UI_StringEditor_error {
    background-color: var(--CBErrorBackgroundColor);
}



.CB_UI_StringEditor:focus-within
.CB_UI_StringEditor_container {
    border-color: var(--CB_UI_spotColor);
}



.CB_UI_StringEditor label {
    display: block;
    color: var(--CBTextColor2);
}



.CB_UI_StringEditor:focus-within label {
    color: var(--CB_UI_spotColor);
}



.CB_UI_StringEditor input,
.CB_UI_StringEditor textarea {
    display: block;
    background-color: transparent;
    border: none;
    color: inherit;
    font: inherit;
    line-height: 1.4;
    min-height: 1.4em; /* 1 */
    outline: none;
    padding: 0;
    resize: none;
    width: 100%;
}



.CB_UI_StringEditor textarea {
    max-height: 60vh;
}



/*  Note 1:

    Setting the line height and min-height is important because of an odd edge
    case. If a CBUIStringEditor is added as display: none, and then is set to
    display: block the textarea will have no height if min-height isn't set. By
    setting the line-height and min-height we can guarantee the heights are the
    same.

    There is still uncertainty regarding fractional pixels. The `font-size`
    property seems to truncate calculated values but height does not. However
    it's undercertain and unlikely that height would not truncte the value.

 */



.CB_UI_StringEditor.CB_UI_StringEditor_tall
textarea {
    min-height: 150px;
}
