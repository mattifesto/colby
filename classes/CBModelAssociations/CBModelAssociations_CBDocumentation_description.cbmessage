--- h1
About
---

This class provides functionality to associate two CBIDs, which may or may not
be CBIDs for models. The association policy is identified by a unique
association key string.



--- h1
Terminology
---

On 2021/09/28 the terms for the three components of an association were
adjusted to be:


--- dl

    --- dt
    first CBID
    ---

    This is the first of the two associated CBIDs.


    --- dt
    association key
    ---

    This is a globally unique string identifying the association.


    --- dt
    second CBID
    ---

    This is the second of the two associated CBIDs.

---

The association developer decides what the first CBID holds and what the
second CBID holds. For instance, if a developer wants to create and
association of authors to pages they might say that the user model CBID of
the author goes in the first position and the page model CBID goes in the
second. It does not matter which CBID goes in which position, but once the
policy is set, they must always go in their assigned position.



--- h1
History
---

The CBModelAssociations table came to exist rather late in the development of
Colby. Situations almost randomly started to occur in unrelated pieces of code
that required some sort of an association table. At first these situations were
handle by creating custom association tables. This quickly got out of hand and
the similarities between the custom tables became obvious.

Organically, the shape and nature of the CBModelAssociations table was developed
and more serious thought was given to the simplicity vs. complexity of such a
table and why the table was a necessary part of Colby.


--- h1
Reasons for this table
---


--- ul

    When you have a lot of associations, the CBModelAssociations table is better
    at storing, reading, and changing them than a model.

    Associations can more easily be made out of order in the associations table.
    To make associations inside models usually requires that both models already
    exist, which will not be the case when the first model is imported.

    It is easier to do transfers of associations using the CBModelAssociations
    table. If you have a product that was in product group 1 and it changes to
    product group 2, you can easily get the previous association before changing
    the association. Then start a task to update both of the pages associated
    with each product group that has changed.

    Imported models should not be edited. If an imported menu model is updated
    by imported items to contain a list of its menu items, when the menu is
    imported again it will lose that list.

    To expand upon: There is something that just feels right about using the
    CBModelAssociations table. I'm having a hard time coming up with the full
    technical reason for this. This document will be updated as the thoughts
    around this topic develop.

---


--- h1
Bidirectional Association
---

Currently there is theoretically no performance difference between fetching the
second CBID for the first CBID or fetching the first CBID for the second CBID.
The terms first and second only exist to provide names to the two CBIDs.

But in many use cases both directions are required. Tags are a good example. In
the case of tags the tagged model CBID would be the first CBID and the tag model
CBID would be the second CBID. Getting the tagged model CBIDs for a tag CBID
would be just as common as getting the tag CBIDs for a tagged model CBID.

There's a possibility that using unidirectional associations and using two
associations when "bidirectional" associations required might help in some way.
There has not been any research done on this though. If there is and it turns
out that unidirectional is better, the CBModelAssociations class should be
replaced with a unidirectional CBModelAssociations2 or something like that.
