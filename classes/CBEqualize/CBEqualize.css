/*
This file is used to give all platforms and browsers an equal starting point for
CSS. If there is anything very basic that's different among platforms or
browsers then rules should be added to this file to equalize and make the
experience the same for all browsers and platforms. Rules that commonly change
between themes or sites should not be placed in this file.
*/


* {
    margin: 0; /* 1 */
}

html {
    font-size:                  16px;               /* 1 */
    overflow-y:                 scroll;             /* 2 */
    text-rendering:             optimizeLegibility; /* 3 */
    -ms-text-size-adjust:       100%;               /* 4 */
    -webkit-text-size-adjust:   100%;               /* 4 */

    --CBButtonBackgroundColor: hsl(210, 80%, 50%);
    --CBButtonBackgroundColorDisabled: hsl(210, 80%, 30%);
    --CBButtonTextColor: hsl(0, 0%, 100%);
    --CBButtonTextColorDisabled: hsla(0, 0, 100%, 0.3);
    --CBMonospaceFontFamily: 'Menlo', 'Courier New', 'Courier', monospace;
}

.CBDarkTheme {
    --CBBackgroundColor: hsl(0, 0%, 10%);
    --CBBackgroundColorForPanel: hsla(0, 0%, 100%, 0.05);
    --CBLineColor: hsla(0, 0%, 100%, 0.3);
    --CBTextColor: hsla(0, 0%, 100%, 0.9);
    --CBTextColor2: hsla(0, 0%, 100%, 0.6);
    --CBTextColorForLinks: hsla(210, 80%, 50%, 0.9);

    /**
     * CBUIBorderColor is not translucent because it needs to be the same color
     * over any background color
     */
    --CBBackgroundColor2: hsl(0, 0%, 15%); /* @deprecated use CBUIBackgroundColor */
    --CBUIBackgroundColor: hsl(0, 0%, 15%);
    --CBUIBorderColor: hsl(0, 0%, 25%);

    background-color: hsl(0, 0%, 10%); /* IE11s */
    background-color: var(--CBBackgroundColor);
    color: hsla(0, 0%, 100%, 0.7); /* IE11 */
    color: var(--CBTextColor);
}

.CBLightTheme {
    --CBBackgroundColor: hsl(0, 0%, 100%);
    --CBBackgroundColorForPanel: hsla(0, 0%, 100%, 0.8);
    --CBLineColor: hsla(20, 30%, 50%, 0.2);
    --CBTextColor: hsla(0, 0%, 0%, 0.9);
    --CBTextColor2: hsla(0, 0%, 0%, 0.6);
    --CBTextColorForLinks: hsla(210, 80%, 50%, 0.9);

    /**
     * CBUIBorderColor is not translucent because it needs to be the same color
     * over any background color
     */
    --CBBackgroundColor2: hsl(0, 0%, 95%); /* @deprecated use CBUIBackgroundColor */
    --CBUIBackgroundColor: hsl(0, 0%, 95%);
    --CBUIBorderColor: hsl(0, 0%, 80%);

    background-color: hsl(0, 0%, 100%); /* IE11 */
    background-color: var(--CBBackgroundColor);
    color: hsla(0, 0%, 0%, 0.9); /* IE11 */
    color: var(--CBTextColor);
}

a {
    color: var(--CBTextColorForLinks);
}

body {
 /* align-items:            stretch (default) */    /* 1 */
    display:                flex;                   /* 2 */
    display:                -ms-flexbox;
    display:                -webkit-flex;
    flex-direction:         column;                 /* 2 */
    -ms-flex-direction:     column;
    -webkit-flex-direction: column;
    min-height:             100vh;                  /* 3 */
    position:               relative;               /* 4 */
}

body > * {
    flex:                   none;                   /* 5 */
    -ms-flex:               none;
    -webkit-flex:           none;
}

body > .flex-fill {
    flex:                   1 0 auto;               /* 6 (IE10 = no) */
    -ms-flex:               1 0 auto;
    -webkit-flex:           1 0 auto;
}

main {
    display: block; /* 1 */
}

a:link, a:active, a:focus, a:hover {
    outline: none;
}

a img {
    border: none;
}

code, pre {
    font-family: var(--CBMonospaceFontFamily);
}

pre {
    overflow: auto;
}

button, input, select, textarea {
    box-sizing: border-box; /* 1 */
}

input[type=email], input[type=text], input[type=url], textarea {
    border: 1px solid hsl(0, 0%, 80%); /* 1 */
}

table {
    border-spacing: 0px; /* 1 */
}

td, th {
    padding:        0;          /* 1 */
    text-align:     left;
    vertical-align: baseline;   /* 2 */
}

ul.horizontal {
    padding-left:   0px;    /* 1 */
}

ul.horizontal > li {
    display:        inline;
    margin-left:    0.75em; /* 2 */
    margin-right:   0.75em; /* 2 */
}

/*
z-index guide

500 Sticky menus and panels

    A menu or panel needs to be at a higher z-index so that elements declared
    later in the document scroll underneath the menu or panel.

1000 Full viewport modal shield

    A full viewport modal shield is a fixed element displayed underneath a model
    element used to prevent input from reaching the elements underneath.

    1000 is the z-index of the shield element, so the modal elements above the
    shield may have a z-index of 1001 or some other number greater than 1000.

    No element should have a constant z-index of 1000 or higher. An element can
    adopt this z-index when it becomes modal and adopt more normal z-index when
    it when it is no longer modal.

1500 Full viewport error message shield

    A full viewport error message shield is like a full viewport modal shield
    except that it can potentially be displayed while a full viewport modal
    shield is being displayed and must have a higher z-index.

    1500 is the z-index of the shield, so the error message elements may have a
    z-index of 1501 or greater.
*/

/*

Footnotes
---------

*:

1.  The default margins are not generally helpful, especially on the `body`
element. In the past the padding has also been removed but it turns out that
much of the default padding is useful.


html:

1.  The value `16px` matches the default size used by most, if not all, browsers
but it can be changed by the user in browser preferences. This guarantees that
it is the value because most layouts can't really handle a root change of a font
size. With the high quality zoom support that browsers have today, accessibility
is not as much of a concern with regard to font size.

2.  This forces a scrollbar to appear at all times on browsers that have
scrollbars so that the layout does not shift between shorter and longer pages
that may otherwise toggle the scrollbar's presence.

3.  Setting the `text-rendering` property to "optimizeLegibility" allows basic
font ligatures to be used. This behavior might eventually be on by default.

4.  These rules prevent phone browsers from resizing text to a minimum size
based on phone heuristics. This generally breaks the layout and degrades the
experience rather then helping the user.


body:

1.  The default value for `align-items` is stretch which closely resembles the
default behavior of an element outside of a flexbox. Specifying something like
`center` as the value may be tempting but it will inadvertently horizontally
collapse some elements causing backgrounds to not fill the full width of the
viewport. This is much harder to explain to an end user than the fact that
centering is not the default behavior which they are generally used to.

2.  This makes the body a vertical flexbox which behaves the same as if it
wasn't except it allows flexible box behaviors such as placing the footer at the
bottom of the viewport for short pages.

3.  This makes the body at least as tall as the viewport which enables the
footer to be placed at the bottom of the viewport when the content is small.

4.  By default absolutely positioned elements are positioned relative to the
`body` element.

5.  This makes children of the body non-flexible by default, which basically
makes them behave exactly as if they were not in a flexible box container.

6.  Use this class on a child that is allowed to grow to take up extra space
between other elements. This should be used on an empty element right above the
page footer. IE10: I think this used to work on IE10, but I know that it's very
particular about the way the height is specified on the html and body elements.
At some point I must have changed this and now it doesn't work on IE10. Don't
bother trying to fix it. IE10 started being deprecated as of this issue.


main:

1.  The `main` element is supported in newer browsers but is not yet a `block`
element by default. Remove this rule as soon as new browsers define it as a
`block` element in the default stylesheet. (2013.05.20)


button, input, select, textarea:

1.  This rule allows form elements to be set to `100%` wide and properly fill
that width. Without it, the element border widths make it slightly larger.

Note: Any other attempts to equalize the form elements is most likely
counterproductive. Most browsers degrade the appearance of these elements as
soon as any visible property is applied. Views involving form elements should be
designed to withstand slight appearance differences between browsers.


input, textarea:

1.  In apparently all browsers the the default colors for the input and textarea
elements are different. This color closely resembles the default color for the
input element.


table:

1.  This property is almost universally set on tables. The `normalize.css` file
also has this style.


td, th:

1.  The default padding on table cells is not generally helpful.

2.  The rule `vertical-align: baseline;` is confirmed to be correct here. It
places the text at the top of the cell except when there are situations that
affect the baseline (mixed text sizes, form fields) and then it places the
baseline as close to the top as possible.


ul:

1.  Horizontal lists are used on almost every website and the elements and
styles used are always the same so it makes sense to have them here.

2.  This will make horizontal list items will look pleasantly spaced inside an
element that doesn't have padding of its own. Experience has shown that this is
the best default. There are certainly theoretical cases where this is not the
best and thoses cases should not use this style.


File History
------------

2014.02.22 This file was changed because moving to a "sectioned page" model
means that each of those sections should have no default styles applied but
these. So I spent some time making sure these are good common defaults. In the
future, when making changes keep an eye on the `normalize.css` file available on
the internet. It's a good resource that I'm not yet comfortable using because it
keeps the default margins, but it's very helpful.

2015.05.23 The nature of the `html` and `body` element layout changed to support
using flexible boxes to place the footer at the bottom of the viewport for short
pages. The `body` now becomes the lowest level element relative to which child
elements can be can be placed absolutely. This negatively affects sites using
layout methods that added padding to the `body`. Sites that use those methods
should be migrated to the flexible box method because it's the correct way to do
it and is now available on all supported browsers. I also removed some
historical comments that were not entirely pertinent anymore. If you have a
question about the reasoning or history behind a particular style look at
previous versions of this file.

*/
