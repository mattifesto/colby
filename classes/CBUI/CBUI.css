/**
 * 2019_01_15
 *
 */
.CBUI_action {
    display: flex;
    align-items: center;
    justify-content: center;

    box-sizing: border-box;
    color: hsla(210, 80%, 50%, 0.9); /* IE11 */
    color: var(--CBTextColorForLinks);
    cursor: default;
    min-height: 44px;
    padding: 5px 10px;
    text-align: center;

    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

.CBUI_button1 {
    display: inline-flex;
    align-items: center;
    justify-content: center;

    background: linear-gradient(var(--CBButtonBackgroundColorHighlight), var(--CBButtonBackgroundColor));
    border: 1px solid var(--CBButtonBackgroundColor);
    border-radius: 5px;
    box-sizing: border-box;
    color: var(--CBButtonTextColor);
    min-height: 44px;
    padding: 5px 10px;
    text-align: center;
    width: 640px;

    cursor: default;

    user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    -webkit-user-select: none;
}

/**
 * 2019_01_06
 *
 *      This container is was created to hold one item centered horizontally
 *      will 10px of padding to separarte it from adjacent items.
 *
 *      It might be used to hold each selectable item in a list of selectable
 *      items.
 */
.CBUI_container1 {
    display: flex;
    justify-content: center;
    padding: 10px;
}

/**
 * 2019_01_06
 *
 *      This container was created to hold items that will be centered
 *      horizontally and wrap if there are to many to fit on one line.
 */
.CBUI_container2 {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
}

/**
 * 2019_02_17
 *
 *      This container centers its children vertically.
 */
.CBUI_container3 {
    display: flex;
    flex-direction: column;
    justify-content: center;
}

/**
 * 2019_01_15
 *
 *      This class was created to hold content in section item parts. It is
 *      designed to hold content from a single string to full message content.
 */
.CBUI_content {
    padding: 5px 10px;
}

.CBUI_section_container {
    display: flex;
    justify-content: center;
    padding: 10px 0;
}

.CBUI_section {
    background-color: hsl(0, 0%, 100%); /* IE11 */
    background-color: var(--CBBackgroundColor);
    border-color: hsl(0, 0%, 85%); /* IE11 */
    border-color: var(--CBUIBorderColor);
    border-style: solid;
    border-width: 1px 0;
    box-sizing: border-box;
    max-width: 100%;
    overflow: hidden;
    width: 640px;

    /*
    Stop double-tap zooming on all CBUISections

    Interactive user interfaces are meant to be readable (don't need to be
    zoomed) and often meant to be tapped, potentially quickly.
    */
    touch-action: manipulation;
}

@media (min-width: 641px) {
    .CBUI_section {
        border-radius: 10px;
        border-width: 1px;
    }
}

.CBUI_section > * + * {
    border-top-color: hsl(0, 0%, 85%); /* IE11 */
    border-top-color: var(--CBUIBorderColor);
    border-top-style: solid;
    border-top-width: 1px;
}

/**
 * 2019_02_01
 *
 *      Add this style to a CBUI_section element to make sure the side borders
 *      are never hidden.
 */
.CBUI_section_inner {
    border-radius: 10px;
    border-width: 1px;
}

.CBUI_section_width {
    width: 640px;
}

.CBUI_selectable {
    border: 2px solid var(--CBTextColor3);
    border-radius: 5px;
    box-sizing: border-box;
    max-width: 100%;
    min-width: 44px;
    min-height: 44px;
    overflow: hidden;
}

.CBUI_selectable.CBUI_selected {
    border-color: var(--CBTextColorForLinks);
}

/**
 * 2019_02_23
 *
 *      This class styles an element to stick to the top of the viewport as long
 *      as its parent element is visible. It is intended to be used for high
 *      priority user interface items, such as a container for a subtotal and
 *      buy button on a tall product builder page.
 */
.CBUI_sticky_top {
    background-color: var(--CBBackgroundColor);
    margin-bottom: 40px;
    position: -webkit-sticky;
    position: sticky;
    top: 0;
}

/**
 * 2019_02_13
 *
 *      This class was created for an element that contains a single string of
 *      text that will be centered horizontally and vertically inside an element
 *      at least 44px high.
 */
.CBUI_text1 {
    display: flex;
    align-items: center;
    justify-content: center;

    box-sizing: border-box;
    min-height: 44px;
    padding: 3px 10px 5px;
    text-align: center;
}

/**
 * 2019_01_15
 *
 *      This simple title class can be used before a section or a set of related
 *      sections. It is generally used on an h1-h6 element.
 */
.CBUI_title1 {
    font-size: 100%;
    padding: 20px 20px 10px;
    text-align: center;
}

/**
 * 2019_02_17
 *
 *      This sets the minimum height of an element to a height the is
 *      appropriate for touch user interface.
 */
.CBUI_touch_height {
    min-height: 44px;
}

.CBUIRoot {
    background-color: hsl(0, 0%, 95%); /* IE11 */
    background-color: var(--CBUIBackgroundColor);
    /* can grow, cannot shrink, therefore can fill a flexible container */
    flex: 1 0 auto;
}

.CBUIRoot + .flex-fill {
    display: none;
}

.CBUIHalfSpace {
    height: 22px;
}

.CBUIHeader {
    background-color: hsl(0, 0%, 100%); /* IE11 */
    background-color: var(--CBBackgroundColor);
    border-bottom-color: hsl(0, 0%, 85%); /* IE11 */
    border-bottom-color: var(--CBUIBorderColor);
    border-bottom-style: solid;
    border-bottom-width: 1px;
    display: flex;
    justify-content: space-between;
    padding: 0 5px;
}

.CBUIHeader > .left {
    display: flex;
    flex: 1 1 100px;
    min-width: 0;
}

.CBUIHeader > .center {
    display: flex;
    flex: 0 1 auto;
    min-width: 0;
}

.CBUIHeader > .right {
    display: flex;
    flex: 1 1 100px;
    justify-content: flex-end;
    min-width: 0;
}

.CBUIHeaderItem {
    align-items: center;
    display: flex;
    min-height: 44px;
    min-width: 0;
}

.CBUIHeaderItem > a {
    color: inherit;
    cursor: default;
    font-weight: bold;
    padding: 0 5px;
    text-decoration: none;

    /* ellipsis */
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.CBUIHeaderItem.action > a {
    color: hsla(210, 80%, 50%, 0.9); /* IE11 */
    color: var(--CBTextColorForLinks);
    cursor: pointer;
    font-weight: normal;
}

.CBUIKeyValue {
    padding: 5px 10px;
}

.CBUIKeyValue > .key {
    color: hsl(0, 0%, 50%);
}

.CBUILink {
    align-items: center;
    display: flex;
    min-height: 44px;
    padding: 5px 10px;
}

.CBUILink > span {
    text-align: center;
    width: 100%;
}

.CBUIMessageSectionItemPart {
    flex: 1 1 auto;
    padding: 20px;
}

.CBUISectionHeader {
    box-sizing: border-box;
    color: hsl(0, 0%, 40%); /* IE11 */
    color: var(--CBTextColor2);
    font-size: 14px;
    font-weight: normal;
    margin: 0 auto;
    max-width: 100%;
    padding: 5px 10px;
    width: 640px;
}

.CBUISectionHeader > h1 {
    font: inherit;
    text-transform: uppercase;
}

.CBUISectionHeader > div > p + p {
    margin-top: 0.5em;
}

.CBUISectionItem {
    background-color: hsl(0, 0%, 100%); /* IE11 */
    background-color: var(--CBBackgroundColor);
    min-height: 44px;
}

.CBUISectionItem a {
    color: hsla(210, 80%, 50%, 0.9); /* IE11 */
    color: var(--CBTextColorForLinks);
    text-decoration: none;
}

.CBUISectionItem a:hover {
    text-decoration: underline;
}

/**
 * 2018.04.02 minimum width of flex items
 *
 * By default, a flexible item cannot be smaller than it's content size along
 * the main axis. This may prevent multiple flex items from fitting in their
 * container.
 *
 * To remedy this there are some solutions. You can either set:
 *
 *      "overflow: hidden;"
 *
 *      "min-width: 0;" (or height for vertical flex boxes)
 *
 * This is very important for enabling the display of ellipsis. Often the flex
 * item containing the text uses the overflow method while flexbox parents use
 * the "min-width" method.
 */

.CBUISectionItem .ellipsisTextContainer {
    align-items: center;
    display: flex;
    flex: 1 1 auto;
    min-width: 0; /* min-width method */
    padding: 5px 10px;
}

.CBUISectionItem .ellipsisText {
    overflow: hidden; /* overflow method */
    text-overflow: ellipsis;
    white-space: nowrap;
}

.CBUISectionItem > .information {
    color: hsl(0, 0%, 50%);
    font-size: 14px;
}

.CBUISectionItem2 {
    display: flex;

    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none
}

.CBUISectionItem2 > .thumbnail {
    display: none;
}

.CBUISectionItem2 > .thumbnail.set {
    display: block;
    padding: 5px 0 5px 5px;
}

.CBUISectionItem2 > .thumbnail img {
    display: block;
    height: 40px;
    object-fit: cover;
    width: 40px;
}

.CBUISectionItem2 > .title {
    cursor: pointer;
    flex: 1 1 auto;
    padding: 5px 10px;
}

.CBUISectionItem2 > .CBUIDropdown {
    background-color: inherit;
    display: flex;
    flex: none;
    flex-direction: row-reverse;
    position: relative;
}

.CBUISectionItem2 > .CBUIDropdown.expanded {
    z-index: 1001;
}

.CBUISectionItem2 > .CBUIDropdown > .button {
    align-items: center;
    border-left-color: hsl(0, 0%, 85%); /* IE11 */
    border-left-color: var(--CBUIBorderColor);
    border-left-style: solid;
    border-left-width: 1px;
    box-sizing: border-box;
    display: flex;
    flex: none;
    justify-content: center;
    width: 50px;
}

.CBUISectionItem2 > .CBUIDropdown > .button::after {
    content: "<";
}

.CBUISectionItem2 > .CBUIDropdown.expanded > .button::after {
    content: ">";
}

.CBUISectionItem2 > .CBUIDropdown > .menu {
    display: none;
}

.CBUISectionItem2 > .CBUIDropdown.expanded > .menu {
    display: flex;
}

.CBUISectionItem2 .command {
    align-items: center;
    box-sizing: border-box;
    display: flex;
    justify-content: center;
    min-width: 50px;
    padding: 5px 10px;
}
