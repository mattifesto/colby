.CBUIRoot {
    background-color: hsl(0, 0%, 90%); /* IE11, from CBAdminTheme */
    background-color: var(--CBBackgroundColor2);
    /* can grow, cannot shrink, therefore can fill a flexible container */
    flex: 1 0 auto;
}

.CBUIRoot + .flex-fill {
    display: none;
}

.CBUIButton {
    display: flex;
    justify-content: center;
    padding: 10px;
}

.CBUIButton .button {
    background-color: hsl(210, 80%, 50%); /* IE11, from equalize.css */
    background-color: var(--CBButtonBackgroundColor);
    border-radius: 5px;
    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
    color: hsl(0, 0%, 100%); /* IE11, from equalize.css */
    color: var(--CBButtonTextColor);
    cursor: default;
    padding: 10px 20px;

    user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    -webkit-user-select: none;
}

.CBUIButton.disabled .button {
    background-color: hsl(210, 80%, 30%); /* IE11, from equalize.css */
    background-color: var(--CBButtonBackgroundColorDisabled);
    color: hsla(0, 0, 100%, 0.3); /* IE11, from equalize.css */
    color: var(--CBButtonTextColorDisabled);
}

.CBUIHalfSpace {
    height: 22px;
}

.CBUIHeader {
    background-color: hsl(0, 0%, 95%);
    border-bottom: 1px solid hsl(0, 0%, 80%);
    display: flex;
    justify-content: space-between;
    min-height: 44px;
}

.CBUIHeader > * {
    box-sizing: border-box;
    display: flex;
}

.CBUIHeader > :matches(.left, .right) {
    flex: 1 1 1px;
}

/* @deprecated use .CBUIHeaderButtonItem */
.CBUIHeader :matches(.left, .right) .CBUIHeaderAction {
    align-items: center;
    display: flex;
    color: hsl(210, 100%, 50%);
    cursor: pointer;
}

.CBUIHeader > .right {
    justify-content: flex-end;
}

.CBUIHeader > .center {
    flex: 0 1 auto;
    max-width: 60%;
}

.CBUIHeaderButtonItem {
    align-items: center;
    display: flex;
    color: hsl(210, 100%, 50%);
    cursor: pointer;
    overflow: hidden;
    padding: 0 5px;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.CBUIHeader > .center > *, /* @deprecated transitional until CBUIHeaderTitle is used everywhere */
.CBUIHeaderTitle {
    align-items: center;
    display: flex;
    font-weight: bold;
    text-align: center;
}

.CBUIKeyValue {
    padding: 5px 10px;
}

.CBUIKeyValue > .key {
    color: hsl(0, 0%, 50%);
}

.CBUILink {
    align-items: center;
    display: flex;
    min-height: 44px;
    padding: 5px 10px;
}

.CBUILink > span {
    text-align: center;
    width: 100%;
}

.CBUISection {
    border-color: hsl(0, 0%, 80%);
    border-style: solid;
    border-width: 1px 0;
    box-sizing: border-box;
    margin: 0 auto;
    max-width: 100%;
    overflow: hidden;
    width: 640px;
}

.CBUISectionHeader {
    box-sizing: border-box;
    color: hsl(0, 0%, 40%);
    font-size: 14px;
    font-weight: normal;
    margin: 0 auto;
    max-width: 100%;
    padding: 5px 10px;
    width: 640px;
}

.CBUISectionHeader > h1 {
    font: inherit;
    text-transform: uppercase;
}

.CBUISectionHeader > div > p + p {
    margin-top: 0.5em;
}

@media all and (min-width: 641px) {
    .CBUISection {
        border-radius: 10px;
        border-width: 1px;
    }
}

.CBUISectionItem {
    background-color: white;
    min-height: 44px;
}

.CBUISectionItem a {
    color: hsl(210, 100%, 50%);
    text-decoration: none;
}

.CBUISectionItem a:hover {
    text-decoration: underline;
}

.CBUISectionItem.components {
    display: flex;
}

.CBUISectionItem.components .arrow {
    align-items: center;
    color: var(--CBTextColor2);
    display: flex;
    flex: none;
    justify-content: center;
    width: 30px;
}

.CBUISectionItem.components .arrow::after {
    content: ">";
}

/**
 * 2017.12.20 Getting ellipsis to work reliably in flexible boxes has been
 * difficult. The results can even change depending on the number of levels of
 * flex container hierarchy. The solution is this min-width: 0; declaration.
 * It's less important to use these specific selectors than it is to draw
 * attention to the solution.
 */
.CBUISectionItem .ellipsisTextContainer {
    align-items: center;
    display: flex;
    flex: 1 1 auto;

    /**
     * The min-width: 0; declaration must be specified on the flex container if
     * a flex item wants to use text-overflow: ellipsis;
     */
    min-width: 0;
    padding: 5px 10px;
}

.CBUISectionItem .ellipsisText {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.CBUISection > .CBUISectionItem + .CBUISectionItem {
    border-top: 1px solid hsl(0, 0%, 80%);
}

.CBUISectionItem > .information {
    color: hsl(0, 0%, 50%);
    font-size: 14px;
}

.CBUISectionItem2 {
    display: flex;

    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none
}

.CBUISectionItem2 > .thumbnail {
    display: none;
}

.CBUISectionItem2 > .thumbnail.set {
    display: block;
    padding: 5px 0 5px 5px;
}

.CBUISectionItem2 > .thumbnail img {
    display: block;
    height: 40px;
    object-fit: cover;
    width: 40px;
}

.CBUISectionItem2 > .title {
    cursor: pointer;
    flex: 1 1 auto;
    padding: 5px 10px;
}

.CBUISectionItem2 > .CBUIDropdown {
    background-color: inherit;
    display: flex;
    flex: none;
    flex-direction: row-reverse;
    position: relative;
}

.CBUISectionItem2 > .CBUIDropdown.expanded {
    z-index: 1001;
}

.CBUISectionItem2 > .CBUIDropdown > .button {
    align-items: center;
    border-left: 1px solid hsl(0, 0%, 80%);
    box-sizing: border-box;
    display: flex;
    flex: none;
    justify-content: center;
    width: 50px;
}

.CBUISectionItem2 > .CBUIDropdown > .button::after {
    content: "<";
}

.CBUISectionItem2 > .CBUIDropdown.expanded > .button::after {
    content: ">";
}

.CBUISectionItem2 > .CBUIDropdown > .menu {
    display: none;
}

.CBUISectionItem2 > .CBUIDropdown.expanded > .menu {
    display: flex;
}

.CBUISectionItem2 .command {
    align-items: center;
    box-sizing: border-box;
    display: flex;
    justify-content: center;
    min-width: 50px;
    padding: 5px 10px;
}
