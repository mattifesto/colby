.CBTextView2.CBTextView2StandardLayout {
    box-sizing: border-box;
    display: flex;
    justify-content: center;
    max-width: 100%;
    padding: 20px;
}

/**
 * The align-self and flex declarations make the view fill and flexible
 * container.
 */
.CBTextView2StandardLayout.hero1 {
    font-size: 3vw;
    line-height: normal;
    padding: 5vw;
}

@media (max-width: 479px) {
    .CBTextView2StandardLayout.hero1 {
        font-size: 8vw;
    }
}

.CBTextView2StandardLayout .content {
    max-width: 100%;
    width: 36em;
}

/* We don't want hero content to have an pre-set intrinsic width, which would
   behave as a min-width, and get in the way of some scenarios. */
.CBTextView2StandardLayout.hero1 .content {
    width: auto;
}

.CBTextView2StandardLayout.center {
    text-align: center;
}

/* deprecated: use CBLightTheme to get dark text */
.CBTextView2StandardLayout.dark {
    color: hsla(0, 0%, 0%, 0.9); /* CBTextColor1 for CBLightTheme */
}

.CBTextView2StandardLayout.justify {
    text-align: justify;
}

/* deprecated: use CBDarkTheme to get dark text */
.CBTextView2StandardLayout.light {
    color: hsla(0, 0%, 100%, 0.9); /* CBTextColor1 for CBDarkTheme */
}

.CBTextView2StandardLayout.right {
    text-align: right;
}

.CBTextView2StandardLayout {
    line-height: 1.5;
}

.CBTextView2StandardLayout h1 {
    font-size: 1.25em;
}

.CBTextView2StandardLayout.hero1 h1 {
    font-size: 4em;
}

.CBTextView2StandardLayout h2 {
    font-size: 1em;
}

.CBTextView2StandardLayout.hero1 h2 {
    font-size: 3em;
}

.CBTextView2StandardLayout h3 {
    color: var(--CBTextColor2);
    font-size: 1em;
}

.CBTextView2StandardLayout.hero1 h3 {
    color: inherit;
    font-size: 2em;
}

.CBTextView2StandardLayout.hero1 h4 {
    font-size: 1.5em;
}

.CBTextView2StandardLayout.hero1 h5 {
    font-size: 1.25em;
}

.CBTextView2StandardLayout.hero1 h6 {
    font-size: 1em;
}

.CBTextView2StandardLayout.hero1 a {
    color: inherit;
    text-decoration: none;
}

.CBTextView2StandardLayout.hero1 a:hover {
    text-decoration: underline;
}

.CBTextView2StandardLayout blockquote {
    margin: 2em 3em;
}

.CBTextView2StandardLayout cite {
    font-style: italic;
}

.CBTextView2StandardLayout code {
    color: var(--CBTextColorForLinks);
}

.CBTextView2StandardLayout dd {
    padding: 0 3em;
}

.CBTextView2StandardLayout dd,
.CBTextView2StandardLayout dt,
.CBTextView2StandardLayout dd p {
    margin-bottom: 0.5em;
    margin-top: 0.5em;
}

.CBTextView2StandardLayout pre {
    border-left: 0.2em solid var(--CBTextColor3);
    padding-left: 1em;
    white-space: pre-wrap;
}

.CBTextView2StandardLayout b cite,
.CBTextView2StandardLayout b i,
.CBTextView2StandardLayout cite b,
.CBTextView2StandardLayout cite i,
.CBTextView2StandardLayout i b,
.CBTextView2StandardLayout i cite {
    font-style: inherit;
    font-weight: inherit;
}

/* The following elements always have whitespace on top to emphasize their block. */
.CBTextView2StandardLayout dl,
.CBTextView2StandardLayout ol,
.CBTextView2StandardLayout pre,
.CBTextView2StandardLayout ul {
    margin-top: 1.5em;
}

.CBTextView2StandardLayout li,
.CBTextView2StandardLayout li p {
    margin-bottom: 0.75em;
    margin-top: 0.75em;
}

.CBTextView2StandardLayout blockquote + *,
.CBTextView2StandardLayout dl + *,
.CBTextView2StandardLayout ol + *,
.CBTextView2StandardLayout p + *,
.CBTextView2StandardLayout pre + *,
.CBTextView2StandardLayout ul + * {
    margin-top: 1.5em;
}

.CBTextView2StandardLayout.hero1 .content > * + * {
    margin-top: 3vw;
}

@media (max-width: 479px) {
    .CBTextView2StandardLayout.hero1 .content > * + * {
        margin-top: 8vw;
    }
}
