/**
 * This file exists mainly as documentation of Colby CSS standard styles.
 * While the file may be included, and the styles are approximations of what
 * most sites want, many sites will want to at the very least copy and paste
 * these styles into the main site stylesheet and some of the styles may be
 * customized for the site.
 *
 * The styles in this file are meant not only as templates but also to express
 * a method of using modular styles to apply little bits of style to an element
 * in a way that's very expressive but very flexible. These styles are
 * representative of the way all styles should be decalared to achive the best
 * clarity and flexibility.
 *
 * This file includes detail documentation of the styles which is probably
 * neither desired nor needed in actual site stylesheets.
 */


/* --- Standard Colby Styles ------------------------------------------------ */

/**
 * `big-button`
 */

a.big-button
{
    display: inline-block;
    padding: 10px 30px;
    min-width: 100px;
    border-radius: 5px;

    background-color:#ffef3f;
    cursor: pointer;
    font-weight: 600;
    text-align: center;
    text-shadow:0px 1px 0px #fff79f;
    user-select: none;
}

a.big-button:focus,
a.big-button:hover
{
    background-color: #ffdf2f;
    text-decoration: none;
}


/**
 * `big-field`
 */

input[type=text].big-field,
input[type=file].big-field,
textarea.big-field
{
    padding: 5px;
    border: 1px solid #bfbfbf;
}

input[type=text].big-field:focus,
input[type=file].big-field:focus,
textarea.big-field:focus
{
    padding: 5px;
    border: 1px solid #9f9f9f;
}


/**
 * The `centered-block` class will most likely be used and be exactly the same
 * for all websites. There are so many centered blocks and it is almost always
 * known in the HTML, that this class can save a lot of time. For instance,
 * this element declaration will be very common:
 *
 *    <main class="standard-page-width standard-background centered-block">
 *
 * This style of element declaration may seem long, but it is very expressive
 * and it tells the "story" of an element very well. It also allows the site
 * stylesheet to separate styles that are standard from styles that are site
 * specific making the site specific styles easier to find and read.
 *
 * Another very important aspect of this is that having a "nonstandard" main
 * element is very easy.
 */


.centered-block, /* deprecated */
.standard-centered-block
{
    display: block;
    margin-left: auto;
    margin-right: auto;
}


/**
 * The `standard-background` class is a good example of the goal to have
 * modular styles. Each class provides a limited an predicatable set of styles
 * to an element which can be mixed and match as appropriate.
 *
 * In this case, the `standard-background` actually has what should be the
 * default background value anyway, but may not be if, for instance, the `html`
 * element has a background style.
 *
 * As an option, the `standard-background` style can be non-element specific
 * which depends on the styling needs of the website.
 */

main.standard-background
{
    background-color: white;
}

/* or */

.standard-background
{
    background-color: white;
}


/**
 * `standard-document-header`
 */

header.standard-document-header
{
    text-align: center;
}

header.standard-document-header h1
{
    font-weight: bold;
}


/**
 * In a site's stylesheet this width should be set to the standard width the
 * page. Many sites allow the primary content element either grow with
 * the width of the browser window or stay constant at a standard width. This
 * is the style used to apply that standard width.
 *
 * After much investigation, the width specified below represents the most
 * common internet page width. The truth is, basically every site is still
 * different, and many even have bizarely odd standard widths. On average 980px
 * is that width and has the following benefits.
 *
 * -   It basically fills but doesn't exceed 1000 pixels, a nice round number.
 *
 * -   It basically fills but doesn't exceed 1024 pixels, a standard screen width.
 *
 * -   It's wide enough to accommodate most needs, it leaves plenty of room for
 *     horizontal menus.
 */

.standard-page-width
{
    width: 980px;
}

/**
 * The following rule addresses a complicated issue. It stems from the fact that
 * the `html` and often other elements do not grow horizontally with their
 * children beyond the viewport width. For instance, in a scenario in which
 * I have two elements in the body, the first with a width of 980px and the
 * second with a width of 100%, the second element will not have a minimum
 * width of 980px.
 *
 * If the second element has a background and has content that is wider than the
 * viewport, the page will scroll horizontally but the background will not cover
 * the entire width of the element's children.
 *
 * I have never found a truly clean solution to this problem, but setting the
 * `html` element's minimum width to the same width as the largest common
 * element width, such as `standard-page-width` solves the problem for virtually
 * every situation. There could still be problems if there are elements with set
 * widths greater than the `standard-page-width` but that's not likely.
 *
 * Each site should have its own `standard.css` file and each site has the
 * option of not declaring this style, but I can't think of many non-academic
 * cases where it would be harmful to declare it.
 */

html
{
    min-width: 980px;
}


/**
 * The `standard-white-space` class can be used on any element, but it's
 * purpose below is to apply the standard white space to a `main` element
 * which almost always needs standard white space.
 *
 * It's not good to apply standard styles directly to an element type because
 * doing that forces the site to "undo" those styles for any instance of the
 * element that doesn't want those styles.
 *
 * Therefore, this may mean that every single page specifies
 * `standard-white-space` on its `main` element and that's exactly how it
 * should be. The day that site needs a `main` element with another style
 * of white space it will not be difficult to achieve.
 *
 * `overflow: hidden`
 *
 *    This is included because the nature of "standard white space" includes
 *    the fact that these elements will want to "contain" any floated elements
 *    that have in their content.
 */

main.standard-white-space
{
    overflow: hidden;
    padding-top: 30px;
    padding-bottom: 50px;
}
