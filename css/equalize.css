/**
 * This file is used to give all platforms and browsers an equal base for css.
 * If there is anything very basic that's different among platforms or browsers
 * then rules should be added to this file to equalize and make the experience
 * the same for all browsers and platforms.
 *
 * Things that commonly change from theme to theme should not be placed in this
 * file.
 *
 * 2014.02.22
 *  This file was changed because moving to a "sectioned page" model means that
 *  each of those sections should have no default styles applied but these. So
 *  I spent some time making sure these are good common defaults.
 *
 *  In the future, when making changes keep an eye on the `normalize.css`
 *  file available on the internet. It's a good resource that I'm not yet
 *  comfortable using because it keeps the default margins, but it's very
 *  helpful.
 */

/**
 * 2014.02.22
 *  I made a big change and removed the `padding: 0px;` rule here to get back
 *  a more reasonable style for form elements. Where needed, default padding has
 *  been removed from other elements. I looked through the default style sheets
 *  of most browsers for places where padding was specified and in most places
 *  it was desirable.
 */

*
{
    margin: 0px;
}

html
{
    /**
     * The following two rules provide more obvious behavior for pages that are
     * currently either shorter than or taller than the viewport, which is most
     * pages.
     *
     * By default, the `html` element is only as tall as its content, just like
     * any other block element. By setting the `min-height` to "100%" the `html`
     * element will always be at least as tall as the viewport.
     *
     * By default, absolutely positioned elements are positioned relative to the
     * viewport. By setting the `html` element's `position` to "relative",
     * absolutely positioned elements are positioned relative to the `html`
     * element instead.
     *
     * These two rules provide the following benefits:
     *
     *  -   For pages shorter than the viewport, the `html` element's background
     *      will cover the entire height of the viewport instead of just the
     *      height of the `body` element.
     *
     *  -   For pages shorter than the viewport, child elements that are
     *      absolutely positioned relative to the bottom will be positioned
     *      relative to the bottom of the viewport.
     *
     *  -   For pages taller than the viewport, child elements that are
     *      absolutely positioned relative to the bottom will be positioned
     *      relative to the bottom of the natural height of the page.
     */

    min-height: 100%;
    position:   relative;

    /**
     * Setting the `text-rendering` property to "optimizeLegibility" allows
     * basic font ligatures to be used. This behavior might eventually be on by
     * default.
     **/

    text-rendering: optimizeLegibility;

    /**
     * 2014.03.01
     *  These rules prevent phone browsers from resizing text to a minimum
     *  size based on phone heuristics. This generally breaks the layout and
     *  degrades the experience rather then helping the user.
     */

    -ms-text-size-adjust: 100%;
    -webkit-text-size-adjust: 100%;
}

/**
 * 2014.02.22
 *  Setting the default font size below matches the browser default in all of
 *  the cases I can find, although it is user configurable. Many web developers
 *  favor letting the browser set the default and then using `em` units. This
 *  doesn't work well because image sizes are not specified in `em` units, they
 *  are specified in `px` units. Container widths are also generally specified
 *  in `px` units. So if it matters that text stay in constant proportion to
 *  images, which it is if you're doing precise design and layout, then the
 *  fantasy of a flexible default font size is not possible. For people with
 *  disabilities, all modern devices support quality zooming which means any
 *  user can zoom the page to read the text and retain the benefit of the
 *  precise layout. It's not always a perfect solution, but it's the same
 *  solution implemented for physical items like, books, newspapers, and
 *  magazines.
 *
 *  The `overflow-y: scroll;` rule is set so that all browsers include a
 *  vertical scrollbar at all times so that the width of the viewport doesn't
 *  shift between shorter and taller pages, which causes an unpleasant
 *  distraction.
 */

html
{
    font-size: 16px;
    overflow-y: scroll;
}

/**
 * 2013.05.20
 *
 * The `main` element is supported in newer browsers but is not yet a `block`
 * element by default. Remove this rule as soon as new browsers define it as
 * a `block` element in the default stylesheet.
 *
 * As of this writing, neither Safari nor Firefox do this.
 */

main
{
    display: block;
}

a:link,
a:active,
a:focus,
a:hover
{
    outline: none;
}

a img
{
    border: none;
}

pre
{
    overflow: auto;
}

/**
 * 2013.10.20
 *  Added the `-moz-box-sizing` property because Firefox hasn't yet implemented
 *  the `box-sizing` propery.
 *
 * 2014.02.22
 *  This rule has been here a while. The reason is that it's common to set form
 *  fields to be 100% wide. If the box sizing isn't "border-box" then the field
 *  overflows its container in ways that are unattractive.
 *
 * 2014.03.01
 *  Styles that attempted to equalize the default font of user interface
 *  elements have been removed.
 *
 *  -   Setting the font style on a `button` element removes the default OS
 *      specific formatting and you can never get it back. The OS formatting
 *      for administrative purposes works very well if another more established
 *      button style is not available.
 *
 *  -   Setting the font on a `select` element doesn't even work in Safari so
 *      the various elements become mismatched, not equalized.
 *
 *  -   It is often not desirable for the font of `input` elements to be
 *      inherited. One undesirable style is not better than another undesirable
 *      style, but having less styles is more desirable than more styles.
 *
 *  Attempts to equalize form elements without committing to a full suite of
 *  styles is futile. It makes the elements look worse and de-equalizes them
 *  within each browser.
 */

button,
input,
select,
textarea
{
    box-sizing: border-box;
    -moz-box-sizing: border-box;
}

/**
 * 2014.02.22
 *  This property is almost universally set on tables. The `normalize.css` file
 *  also has this style.
 */

table
{
    border-spacing: 0px;
}

/**
 * 2014.02.22
 *  Added `padding: 0px;` because the general padding rule was removed but
 *  we still want to remove padding here.
 *
 *  The rule `vertical-align: baseline;` is confirmed to be correct here. It
 *  places the text at the top of the cell except when there are situations
 *  that affect the baseline (mixed text sizes, form fields) and then it places
 *  the baseline as close to the top as possible.
 */

td,
th
{
    padding:        0px;
    text-align:     left;
    vertical-align: baseline;
}

/**
 * Horizontal lists are used on almost every website and the elements and
 * styles used are always the same so it makes sense to have them here.
 *
 * 2013.01.14
 *  Switched from a left margin of 1.5em on `ul.horizontal > li + li` to
 *  0.75em left _and_ right margins on `ul.horizontal > li`. This will make
 *  horizontal list items will look pleasantly spaced inside an element that
 *  doesn't have padding of its own. Previously it had been assumed the
 *  containing element would have the padding required to make the horizontal
 *  list look good, but that was a bad assumption.
 *
 *  This also means that the list will not be aligned to the left edge of the
 *  containing element which has never been a requirement of any previous
 *  scenario.
 */

ul.horizontal
{
    padding-left: 0px;
}

ul.horizontal > li
{
    display:        inline;
    margin-left:    0.75em;
    margin-right:   0.75em;
}
